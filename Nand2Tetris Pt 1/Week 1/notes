XOR - outputs 1 if exactly 1 input is 1, otherwise 0 

 Laws 
 ------------
 Commutative
 Associative
 Distributive 
 De Morgan Laws 
 idempotent
 
 to write a boolean expression while given a truth table 
 
come up with an expression given a truth table
make one that gives TRUE for each row resulting in that and OR them together

then simplify 

Any boolean function can be represented using an expression containing AND, OR, and NOT 

We don't need OR. We only really need AND and NOT 

NAND can be the single function only needed!

NOT x = x NAND x 
x AND y = NOT (x AND y) 

Logic Gates 
 - Elementary (NAND, OR, NOT, etc) 
 - Composite (made of elementary and other composite)
 
if a == 1 and b == 1:
	return 0 
else:
	return 1 
	
Interface - answers what 
Implementation - answers how 

Can be modeled as a circuit with a light turning on or off

Physical implementations are left to Electrical Engineering 

/** doc */ 

CHIP xor { 
	IN a, b; 
	OUT out; 
	
	PARTS:
		// implementation missing
}

can distribute signal in as many copies in diagram 
HDL has unlimited fan out 

name internal connections 

Not (in=a, out=nota); 
Not (in=b, out=notb); 

functional / declarative 

statements can be written in any order
customary to fo from left to right
more readable 

Common HDLs
- VHDL
- Verilog 

Interactive, Script Based, and output files can be used for simulations 

load Xor.hdl,
output-file Xor.out,
output-list a b out;
set a 0, set b 0, eval, output; 

There are many hardware simulators 

Ours is minimal and simple 

System Architects and Developers 

Architect Creates
- Chip API 
- Test Script
- A compare file 

IN a[16], b[16]; 
// size of bits ^
[0..5] rang of bits for a bus 